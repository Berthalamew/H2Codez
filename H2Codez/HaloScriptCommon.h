#pragma once
#include "stdafx.h"
#include <unordered_map>
#include <map>
#include <string>

namespace HaloScriptCommon
{
	typedef char(__cdecl *func_check)(__int16 opcode, unsigned __int16 a2);
	typedef void **(__cdecl *func_impl)(int opcode, void *a2, char a3);

	enum class hs_type {
		unparsed,
		special_form,
		function_name,
		passthrough,
		nothing,
		boolean,
		real,
		hs_short,
		hs_long,
		string,
		script,
		string_id,
		unit_seat_mapping,
		trigger_volume,
		cutscene_flag,
		cutscene_camera_point,
		cutscene_title,
		cutscene_recording,
		device_group,
		ai,
		ai_command_list,
		ai_command_script,
		ai_behavior,
		ai_orders,
		starting_profile,
		conversation,
		structure_bsp,
		navpoint,
		point_reference,
		style,
		hud_message,
		object_list,
		sound,
		effect,
		damage,
		looping_sound,
		animation_graph,
		damage_effect,
		object_definition,
		bitmap,
		shader,
		render_model,
		structure_definition,
		lightmap_definition,
		game_difficulty,
		team,
		actor_type,
		hud_corner,
		model_state,
		network_event,
		// objects
		object,
		unit,
		vehicle,
		weapon,
		device,
		scenery,
		object_name,
		unit_name,
		vehicle_name,
		weapon_name,
		device_name,
		scenery_name
	};


	static std::unordered_map <const hs_type, std::string> hs_type_string{
		{ hs_type::unparsed,	"unparsed" },
		{ hs_type::special_form,	"special form" },
		{ hs_type::function_name,	"function name" },
		{ hs_type::passthrough,	"passthrough" },
		{ hs_type::nothing,	"void" },
		{ hs_type::boolean,	"boolean" },
		{ hs_type::real,	"real" },
		{ hs_type::hs_short,	"short" },
		{ hs_type::hs_long,	"long" },
		{ hs_type::string,	"string" },
		{ hs_type::script,	"script" },
		{ hs_type::string_id,	"string_id" },
		{ hs_type::unit_seat_mapping,	"unit_seat_mapping" },
		{ hs_type::trigger_volume,	"trigger_volume" },
		{ hs_type::cutscene_flag,	"cutscene_flag" },
		{ hs_type::cutscene_camera_point,	"cutscene_camera_point" },
		{ hs_type::cutscene_title,	"cutscene_title" },
		{ hs_type::cutscene_recording,	"cutscene_recording" },
		{ hs_type::device_group,	"device_group" },	
		{ hs_type::ai,	"ai" },
		{ hs_type::ai_command_list,	"ai_command_list" },
		{ hs_type::ai_command_script,	"ai_command_script" },
		{ hs_type::ai_behavior,	"ai_behavior" },
		{ hs_type::ai_orders,	"ai_orders" },
		{ hs_type::starting_profile,	"starting_profile" },
		{ hs_type::conversation,	"conversation" },
		{ hs_type::structure_bsp,	"structure_bsp" },
		{ hs_type::navpoint,	"navpoint" },
		{ hs_type::point_reference,	"point reference" },
		{ hs_type::style,	"style" },
		{ hs_type::hud_message,	"hud_message" },
		{ hs_type::object_list,	"object_list" },
		{ hs_type::sound,	"sound" },
		{ hs_type::effect,	"effect" },
		{ hs_type::damage,	"damage" },
		{ hs_type::looping_sound,	"looping_sound" },
		{ hs_type::animation_graph,	"animation_graph" },
		{ hs_type::damage_effect,	"damage_effect" },
		{ hs_type::object_definition,	"object_definition" },
		{ hs_type::bitmap,	"bitmap" },
		{ hs_type::shader,	"shader" },
		{ hs_type::render_model,	"render model" },
		{ hs_type::structure_definition,	"structure definition" },
		{ hs_type::lightmap_definition,	"lightmap definition" },
		{ hs_type::game_difficulty,	"game_difficulty" },
		{ hs_type::team,	"team" },
		{ hs_type::actor_type,	"actor_type" },
		{ hs_type::hud_corner,	"hud_corner" },
		{ hs_type::model_state,	"model_state" },
		{ hs_type::network_event,	"network_event" },
		// objects
		{ hs_type::object,	"object" },
		{ hs_type::unit,	"unit" },
		{ hs_type::vehicle,	"vehicle" },
		{ hs_type::weapon,	"weapon" },
		{ hs_type::device,	"device" },
		{ hs_type::scenery,	"scenery" },
		{ hs_type::object_name,	"object_name" },
		{ hs_type::unit_name,	"unit_name" },
		{ hs_type::vehicle_name,	"vehicle_name" },
		{ hs_type::weapon_name,	"weapon_name" },
		{ hs_type::device_name,	"device_name" },
		{ hs_type::scenery_name,	"scenery_name" },
	};

	template<typename T>
	inline std::string get_hs_type_string(T type) {
		return hs_type_string[static_cast<hs_type>(type)];
	}

	struct hs_command
	{
		hs_type return_type;
		char *name;
		DWORD unk1 = 0;
		func_check check_command_args;
		func_impl command_impl;
		char *desc = nullptr;
		char *usage = nullptr;
		WORD arg_count = 0;
		WORD arg_type_array[1];

		hs_command(char *cmd_name, hs_type ret_type, func_check arg_check, func_impl impl)
		{
			name = cmd_name;
			return_type = ret_type;
			check_command_args = arg_check;
			command_impl = impl;
		}

	};
	static_assert(sizeof(hs_command) == 0x20, "Bad struct size");

	struct hs_global_variable {
		char *name;
		hs_type type;
		void *variable_ptr;
	};
	static_assert(sizeof(hs_global_variable) == 0xC, "Bad struct size");

	bool hs_execute(char *script, bool ran_from_console = true);

	enum class ai_behaviour : DWORD {
		GENERAL_GROUP,
		root,
		null,
		null_discrete,
		obey,
		guard,
		follow_behavior,
		ready,
		smash_obstacle,
		destroy_obstacle,
		perch,
		cover_friend,
		blind_panic,
		ENGAGE_GROUP,
		engage,
		fight,
		melee_charge,
		melee_leaping_charge,
		surprise,
		grenade_impulse,
		anti_vehicle_grenade,
		stalk,
		berserk_wander_impulse,
		BERSERK_GROUP,
		last_man_berserk,
		stuck_with_grenade_berserk,
		PRESEARCH_GROUP,
		presearch,
		presearch_uncover,
		destroy_cover,
		suppressing_fire,
		grenade_uncover,
		leap_on_cover,
		SEARCH_GROUP,
		search,
		uncover,
		investigate,
		pursuit_sync,
		pursuit,
		postsearch,
		coverme_investigate,
		SELF_DEFENSE_GROUP,
		self_preservation,
		cover,
		cover_peek,
		avoid,
		evasion_impulse,
		dive_impulse,
		danger_cover_impulse,
		danger_crouch_impulse,
		proximity_melee,
		proximity_self_preservation,
		unreachable_enemy_cover,
		scary_target_cover,
		group_emerge,
		RETREAT_GROUP,
		retreat,
		retreat_grenade,
		flee,
		cower,
		low_shield_retreat,
		scary_target_retreat,
		leader_dead_retreat,
		peer_dead_retreat,
		danger_retreat,
		proximity_retreat,
		charge_when_cornered,
		surprise_retreat,
		overheated_weapon_retreat,
		AMBUSH,
		ambush,
		coordinated_ambush,
		proximity_ambush,
		vulnerable_enemy_ambush,
		nowhere_to_run_ambush,
		VEHICLE_GROUP,
		vehicle,
		enter_friendly_vehicle,
		reenter_flipped_vehicle,
		vehicle_entry_engage_impulse,
		vehicle_board,
		vehicle_fight,
		vehicle_charge,
		vehicle_ram_behavior,
		vehicle_cover,
		damage_vehicle_cover,
		exposed_rear_cover_impulse,
		player_endagered_cover_impulse,
		vehicle_avoid,
		vehicle_pickup,
		vehicle_player_pickup,
		vehicle_exit_impulse,
		danger_vehicle_exit_impulse,
		vehicle_flip,
		vehicle_turtle,
		vehicle_engage_patrol_impulse,
		vehicle_engage_wander_impulse,
		POSTCOMBAT_GROUP,
		postcombat,
		post_postcombat,
		check_friend,
		shoot_corpse,
		postcombat_approach,
		ALERT_GROUP,
		alert,
		IDLE_GROUP,
		idle,
		wander_behavior,
		flight_wander,
		patrol,
		fall_sleep,
		BUGGERS_GROUP,
		bugger_ground_uncover,
		SWARMS_GROUP,
		swarm_root,
		swarm_attack,
		support_attack,
		infect,
		scatter,
		eject_parasite,
		flood_self_preservation,
		juggernaut_flurry,
		SENTINELS_GROUP,
		enforcer_weapon_control,
		grapple,
		SPECIAL_GROUP,
		formation,
		grunt_scared_by_elite,
		stunned,
		cure_isolation,
		deploy_turret,
		invalid = 0xFFFFFFFF
	};

	static std::map<const ai_behaviour, std::string> ai_behaviour_string {
		{ ai_behaviour::GENERAL_GROUP, "------GENERAL------" },
		{ ai_behaviour::root, "root" },
		{ ai_behaviour::null, "null" },
		{ ai_behaviour::null_discrete, "null_discrete" },
		{ ai_behaviour::obey, "obey" },
		{ ai_behaviour::guard, "guard" },
		{ ai_behaviour::follow_behavior, "follow behavior" },
		{ ai_behaviour::ready, "ready" },
		{ ai_behaviour::smash_obstacle, "smash_obstacle" },
		{ ai_behaviour::destroy_obstacle, "destroy_obstacle" },
		{ ai_behaviour::perch, "perch" },
		{ ai_behaviour::cover_friend, "cover_friend" },
		{ ai_behaviour::blind_panic, "blind_panic" },
		{ ai_behaviour::ENGAGE_GROUP, "------ENGAGE------" },
		{ ai_behaviour::engage, "engage" },
		{ ai_behaviour::fight, "fight" },
		{ ai_behaviour::melee_charge, "melee_charge" },
		{ ai_behaviour::melee_leaping_charge, "melee_leaping_charge" },
		{ ai_behaviour::surprise, "surprise" },
		{ ai_behaviour::grenade_impulse, "grenade_impulse" },
		{ ai_behaviour::anti_vehicle_grenade, "anti_vehicle_grenade" },
		{ ai_behaviour::stalk, "stalk" },
		{ ai_behaviour::berserk_wander_impulse, "berserk_wander_impulse" },
		{ ai_behaviour::BERSERK_GROUP, "------BERSERK------" },
		{ ai_behaviour::last_man_berserk, "last_man_berserk" },
		{ ai_behaviour::stuck_with_grenade_berserk, "stuck_with_grenade_berserk" },
		{ ai_behaviour::PRESEARCH_GROUP, "------PRESEARCH------" },
		{ ai_behaviour::presearch, "presearch" },
		{ ai_behaviour::presearch_uncover, "presearch uncover" },
		{ ai_behaviour::destroy_cover, "destroy_cover" },
		{ ai_behaviour::suppressing_fire, "suppressing fire" },
		{ ai_behaviour::grenade_uncover, "grenade_uncover" },
		{ ai_behaviour::leap_on_cover, "leap_on_cover" },
		{ ai_behaviour::SEARCH_GROUP, "------SEARCH------" },
		{ ai_behaviour::search, "search" },
		{ ai_behaviour::uncover, "uncover" },
		{ ai_behaviour::investigate, "investigate" },
		{ ai_behaviour::pursuit_sync, "pursuit_sync" },
		{ ai_behaviour::pursuit, "pursuit" },
		{ ai_behaviour::postsearch, "postsearch" },
		{ ai_behaviour::coverme_investigate, "coverme_investigate" },
		{ ai_behaviour::SELF_DEFENSE_GROUP, "------SELF-DEFENSE------" },
		{ ai_behaviour::self_preservation, "self_preservation" },
		{ ai_behaviour::cover, "cover" },
		{ ai_behaviour::cover_peek, "cover peek" },
		{ ai_behaviour::avoid, "avoid" },
		{ ai_behaviour::evasion_impulse, "evasion_impulse" },
		{ ai_behaviour::dive_impulse, "dive_impulse" },
		{ ai_behaviour::danger_cover_impulse, "danger cover impulse" },
		{ ai_behaviour::danger_crouch_impulse, "danger crouch impulse" },
		{ ai_behaviour::proximity_melee, "proximity_melee" },
		{ ai_behaviour::proximity_self_preservation, "proximity_self_preservation" },
		{ ai_behaviour::unreachable_enemy_cover, "unreachable_enemy_cover" },
		{ ai_behaviour::scary_target_cover, "scary_target_cover" },
		{ ai_behaviour::group_emerge, "group_emerge" },
		{ ai_behaviour::RETREAT_GROUP, "------RETREAT------" },
		{ ai_behaviour::retreat, "retreat" },
		{ ai_behaviour::retreat_grenade, "retreat_grenade" },
		{ ai_behaviour::flee, "flee" },
		{ ai_behaviour::cower, "cower" },
		{ ai_behaviour::low_shield_retreat, "low_shield_retreat" },
		{ ai_behaviour::scary_target_retreat, "scary_target_retreat" },
		{ ai_behaviour::leader_dead_retreat, "leader_dead_retreat" },
		{ ai_behaviour::peer_dead_retreat, "peer_dead_retreat" },
		{ ai_behaviour::danger_retreat, "danger_retreat" },
		{ ai_behaviour::proximity_retreat, "proximity_retreat" },
		{ ai_behaviour::charge_when_cornered, "charge when cornered" },
		{ ai_behaviour::surprise_retreat, "surprise_retreat" },
		{ ai_behaviour::overheated_weapon_retreat, "overheated_weapon_retreat" },
		{ ai_behaviour::AMBUSH, "------AMBUSH------" },
		{ ai_behaviour::ambush, "ambush" },
		{ ai_behaviour::coordinated_ambush, "coordinated_ambush" },
		{ ai_behaviour::proximity_ambush, "proximity_ambush" },
		{ ai_behaviour::vulnerable_enemy_ambush, "vulnerable_enemy_ambush" },
		{ ai_behaviour::nowhere_to_run_ambush, "nowhere_to_run_ambush" },
		{ ai_behaviour::VEHICLE_GROUP, "------VEHICLE------" },
		{ ai_behaviour::vehicle, "vehicle" },
		{ ai_behaviour::enter_friendly_vehicle, "enter_friendly_vehicle" },
		{ ai_behaviour::reenter_flipped_vehicle, "re-enter_flipped_vehicle" },
		{ ai_behaviour::vehicle_entry_engage_impulse, "vehicle_entry_engage_impulse" },
		{ ai_behaviour::vehicle_board, "vehicle_board" },
		{ ai_behaviour::vehicle_fight, "vehicle_fight" },
		{ ai_behaviour::vehicle_charge, "vehicle_charge" },
		{ ai_behaviour::vehicle_ram_behavior, "vehicle_ram_behavior" },
		{ ai_behaviour::vehicle_cover, "vehicle_cover" },
		{ ai_behaviour::damage_vehicle_cover, "damage_vehicle_cover" },
		{ ai_behaviour::exposed_rear_cover_impulse, "exposed_rear_cover_impulse" },
		{ ai_behaviour::player_endagered_cover_impulse, "player_endagered_cover_impulse" },
		{ ai_behaviour::vehicle_avoid, "vehicle_avoid" },
		{ ai_behaviour::vehicle_pickup, "vehicle_pickup" },
		{ ai_behaviour::vehicle_player_pickup, "vehicle_player_pickup" },
		{ ai_behaviour::vehicle_exit_impulse, "vehicle_exit_impulse" },
		{ ai_behaviour::danger_vehicle_exit_impulse, "danger_vehicle_exit_impulse" },
		{ ai_behaviour::vehicle_flip, "vehicle_flip" },
		{ ai_behaviour::vehicle_turtle, "vehicle_turtle" },
		{ ai_behaviour::vehicle_engage_patrol_impulse, "vehicle_engage_patrol_impulse" },
		{ ai_behaviour::vehicle_engage_wander_impulse, "vehicle_engage_wander_impulse" },
		{ ai_behaviour::POSTCOMBAT_GROUP, "------POSTCOMBAT------" },
		{ ai_behaviour::postcombat, "postcombat" },
		{ ai_behaviour::post_postcombat, "post_postcombat" },
		{ ai_behaviour::check_friend, "check_friend" },
		{ ai_behaviour::shoot_corpse, "shoot_corpse" },
		{ ai_behaviour::postcombat_approach, "postcombat_approach" },
		{ ai_behaviour::ALERT_GROUP, "------ALERT------" },
		{ ai_behaviour::alert, "alert" },
		{ ai_behaviour::IDLE_GROUP, "------IDLE------" },
		{ ai_behaviour::idle, "idle" },
		{ ai_behaviour::wander_behavior, "wander behavior" },
		{ ai_behaviour::flight_wander, "flight_wander" },
		{ ai_behaviour::patrol, "patrol" },
		{ ai_behaviour::fall_sleep, "fall_sleep" },
		{ ai_behaviour::BUGGERS_GROUP, "------BUGGERS------" },
		{ ai_behaviour::bugger_ground_uncover, "bugger_ground_uncover" },
		{ ai_behaviour::SWARMS_GROUP, "------SWARMS------" },
		{ ai_behaviour::swarm_root, "swarm_root" },
		{ ai_behaviour::swarm_attack, "swarm_attack" },
		{ ai_behaviour::support_attack, "support_attack" },
		{ ai_behaviour::infect, "infect" },
		{ ai_behaviour::scatter, "scatter" },
		{ ai_behaviour::eject_parasite, "eject parasite" },
		{ ai_behaviour::flood_self_preservation, "flood_self_preservation" },
		{ ai_behaviour::juggernaut_flurry, "juggernaut flurry" },
		{ ai_behaviour::SENTINELS_GROUP, "------SENTINELS------" },
		{ ai_behaviour::enforcer_weapon_control, "enforcer weapon control" },
		{ ai_behaviour::grapple, "grapple" },
		{ ai_behaviour::SPECIAL_GROUP, "------SPECIAL------" },
		{ ai_behaviour::formation, "formation" },
		{ ai_behaviour::grunt_scared_by_elite, "grunt scared by elite" },
		{ ai_behaviour::stunned, "stunned" },
		{ ai_behaviour::cure_isolation, "cure_isolation" },
		{ ai_behaviour::deploy_turret, "deploy_turret" }
	};

	ai_behaviour string_to_ai_behaviour(const std::string &contents);
};

